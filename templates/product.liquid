<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

<script>
//Initialize the tab content with overview metadata
$(document).ready(function() {
  var overviewContent = $("#overviewContent").html().split("\n");
  var overviewContentHTML = [];
  for (var i = 0; i < overviewContent.length; i++) {
    overviewContentHTML[i] = "<li>" + overviewContent[i] + "</li>";
  }

  return $("#tabContent").html(overviewContentHTML);
});

//When user clicks on a tab, insert the appropriate metadata into the #tabContent
$(document).ready(function() {
  $(".tab").click(function() {
    //Assign the current tab, unassign any others
    $(".tab").removeClass("active");
    $(this).addClass("active");
    //Get which key of the metadata we are using and assign the hidden content to be the content in the tabContent div
    if ($(this).hasClass("overview")) {
      var overviewContent = $("#overviewContent").html().split("\n");
      var overviewContentHTML = [];
      for (var i = 0; i < overviewContent.length; i++) {
        overviewContentHTML[i] = "<li>" + overviewContent[i] + "</li>";
      }

      return $("#tabContent").html(overviewContentHTML);
    }
    else if ($(this).hasClass("suites")) {
      var suitesContent = $("#suitesContent").html().split("\n");
      var suitesContentHTML = [];
      for (var i = 0; i < suitesContent.length; i++) {
        suitesContentHTML[i] = "<li>" + suitesContent[i] + "</li>";
      }

      return $("#tabContent").html(suitesContentHTML);
    }
    else if ($(this).hasClass("kitchen")) {
      var kitchenContent = $("#kitchenContent").html().split("\n");
      var kitchenContentHTML = [];
      for (var i = 0; i < kitchenContent.length; i++) {
        kitchenContentHTML[i] = "<li>" + kitchenContent[i] + "</li>";
      }

      return $("#tabContent").html(kitchenContentHTML);
    }
    else if ($(this).hasClass("grounds")) {
      var groundsContent = $("#groundsContent").html().split("\n");
      var groundsContentHTML = [];
      for (var i = 0; i < groundsContent.length; i++) {
        groundsContentHTML[i] = "<li>" + groundsContent[i] + "</li>";
      }

      return $("#tabContent").html(groundsContentHTML);
    }
    else if ($(this).hasClass("recreation")) {
      var recreationContent = $("#recreationContent").html().split("\n");
      var recreationContentHTML = [];
      for (var i = 0; i < recreationContent.length; i++) {
        recreationContentHTML[i] = "<li>" + recreationContent[i] + "</li>";
      }

      return $("#tabContent").html(recreationContentHTML);
    }
    //Assign the content in the #tabContent div to currentMetadata
  });
});
</script>

{% if product.metafields.c_f.overview %}
  <div hidden id="overviewContent">
      {{ product.metafields.c_f.overview }}
  </div>
{% endif %}

{% if product.metafields.c_f.suites %}
  <div hidden id="suitesContent">
      {{ product.metafields.c_f.suites }}
  </div>
{% endif %}

{% if product.metafields.c_f.kitchen %}
  <div hidden id="kitchenContent">
      {{ product.metafields.c_f.kitchen }}
  </div>
{% endif %}

{% if product.metafields.c_f.grounds %}
  <div hidden id="groundsContent">
      {{ product.metafields.c_f.grounds }}
  </div>
{% endif %}

{% if product.metafields.c_f.recreation %}
  <div hidden id="recreationContent">
      {{ product.metafields.c_f.recreation }}
  </div>
{% endif %}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

    <div class="grid product-single">
    <div class="grid__item text-center">
      <div class="product-single__photos" id="ProductPhoto">
        {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
        <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
      </div>

      {% comment %}
        Create thumbnails if we have more than one product image
      {% endcomment %}
      {% if product.images.size > 1 %}
        <ul class="product-single__thumbnails grid-uniform text-center" id="ProductThumbs">

          {% for image in product.images %}
            <li class="grid__item one-twelfth">
              <a href="{{ image.src | img_url: 'master' }}" class="product-single__thumbnail">
                <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
              </a>
            </li>
          {% endfor %}

        </ul>
      {% endif %}
    </div>

    <div class="grid__item text-center colorBackground">

      <h1 itemprop="name">{{ product.title }}</h1>

      <hr class="one-sixth">



      <div class="product-description rte large--one-half no-float" itemprop="description">
        {{ product.description }}
      </div>

      <div class="tabs">
        <ul>
          {% if product.metafields.c_f.overview %}
            <li class="tab overview active">
                OVERVIEW
            </li>
          {% endif %}

          {% if product.metafields.c_f.suites %}
            <li class="tab suites">
                SUITES
            </li>
          {% endif %}

          {% if product.metafields.c_f.kitchen %}
            <li class="tab kitchen">
                KITCHEN
            </li>
          {% endif %}

          {% if product.metafields.c_f.grounds %}
            <li class="tab grounds">
                GROUNDS
            </li>
          {% endif %}

          {% if product.metafields.c_f.recreation %}
            <li class="tab recreation">
                RECREATION
            </li>
          {% endif %}

        </ul>
      </div>

      <div id="tabContent">
      </div>


      <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">




        {% comment %}

        WE NEED TO REPLACE THE BELOW FORM WITH A CONTACT FORM

        {% endcomment %}
        {% comment %}
          ID addToCartForm is a selector for the ajax cart plugin
        <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm" class="form-vertical overflow-hidden">

          {% comment %}
            Add product variants as a dropdown.
              - By default, each variant (or combination of variants) will display as its own <option>
              - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

            You can leverage jQuery to add a callback on page load and each time the select element changes:
              - Include option_selection.js (as seen at the bottom of this file)
              - This allows you to use JavaScript anytime the variant dropdown changes
              - This also separates out your variant options (ie. size, color, etc.) to separate select elements

            For more information on products with multiple options, visit:
              - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
          {% endcomment %}
          <select name="id" id="productSelect" class="product-single__variants">
            {% for variant in product.variants %}
              {% if variant.available %}

                {% comment %}
                  Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                {% endcomment %}
                <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

              {% else %}
                <option disabled="disabled">
                  {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                </option>
              {% endif %}
            {% endfor %}
          </select>

          <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
          <span id="ProductPrice" class="h2" itemprop="price">
            {{ current_variant.price | money }}
          </span>

          {% if product.compare_at_price_max > product.price %}
            <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
            <p id="ComparePrice">
              {{ 'products.product.compare_at' | t }} {{ current_variant.compare_at_price | money }}
            </p>
          {% endif %}

          <label for="Quantity" class="quantity-selector">{{ 'products.product.quantity' | t }}</label>
          <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">

          <button type="submit" name="add" id="AddToCart" class="btn">
            <span id="AddToCartText">{{ 'products.product.add_to_cart' | t }}</span>
          </button>
        </form>
        {% endcomment %}
        {% comment %}
          END ADD TO CART FORM
        {% endcomment %}

        <div class="form-vertical text-center ten-twelfths">
          {% form 'contact' %}

            {% comment %}
              Successful message
            {% endcomment %}
            {% if form.posted_successfully? %}
              <p class="note form-success">
                {{ 'contact.form.post_success' | t }}
              </p>
            {% endif %}

            {{ form.errors | default_errors }}

            {% assign name_attr = 'contact.form.name' | t | handle %}
            <div class="grid__item eight-twelfths text-center">
              <figure><img src="{{ 'joe-new-blue-light-logo-07.svg' | asset_url }}"></figure>
              <hr class="grid__item four-twelfths" />
              <h2 class="grid__item text-center four-twelfths">REQUEST A BOOKING</h2>
              <hr class="grid__item four-twelfths" />
            </div>

            <div class="grid__item large--five-twelfths push--one-sixth">

              <h3 class="grid__item text-center">CONTACT DETAILS</h3>

              <label for="ContactFormName" class="hidden-label">{{ 'contact.form.name' | t }}</label>
              <input type="text" id="ContactFormName" class="input-full" name="contact[{{ name_attr }}]" placeholder="{{ 'contact.form.name' | t }}" autocapitalize="words" value="{% if form[name_attr] %}{{ form[name_attr] }}{% elsif customer %}{{ customer.name }}{% endif %}">

              <label for="ContactFormCountry" class="hidden-label">Country</label>
              <input type="text" id="ContactFormCountry" class="input-full" name="contact[country]" placeholder="Country" autocapitalize="words" value="{% if form.country %}{{ form.country }}{% elsif customer %}{{ customer.country }}{% endif %}">

              <label for="ContactFormEmail" class="hidden-label">{{ 'contact.form.email' | t }}</label>
              <input type="email" id="ContactFormEmail" class="input-full" name="contact[email]" placeholder="{{ 'contact.form.email' | t }}" autocorrect="off" autocapitalize="off" value="{% if form.email %}{{ form.email }}{% elsif customer %}{{ customer.email }}{% endif %}">

              {% assign name_attr = 'contact.form.phone' | t | handle %}
              <label for="ContactFormPhone" class="hidden-label">{{ 'contact.form.phone' | t }}</label>
              <input type="tel" id="ContactFormPhone" class="input-full" name="contact[{{ name_attr }}]" placeholder="{{ 'contact.form.phone' | t }}" pattern="[0-9\-]*" value="{% if form[name_attr] %}{{ form[name_attr] }}{% elsif customer %}{{ customer.phone }}{% endif %}">
            </div>

            <div class="grid__item large--five-twelfths push--one-sixth">
              <h3 class="grid__item text-center">CONTACT DETAILS</h3>

              <input type="text" name="contact[arrivalDate]" class="datepicker" placeholder="Arrival Date">
              <input type="text" name="contact[departureDate]" class="datepicker" placeholder="Departure Date">

              <label for="ContactFormMessage" class="hidden-label">{{ 'contact.form.message' | t }}</label>
              <textarea rows="2" id="ContactFormMessage" class="input-full" name="contact[body]" placeholder="{{ 'contact.form.message' | t }}">{% if form.body %}{{ form.body }}{% endif %}</textarea>

            </div>

            <p class="grid__item">This form is for booking requests only and does not confirm that a booking has been made</p>

            <div class="grid__item text-center">
              <input type="submit" class="btn grid__item no-float margin-center" value="{{ 'contact.form.send' | t }}">
            </div>


          {% endform %}
        </div>

      </div>

      {% comment %}
        If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
        in the URL, we can show next/previous links to other products in the collection.
      {% endcomment %}
      {% if collection %}
        {% if collection.previous_product or collection.next_product %}
          <p>
            {% if collection.previous_product %}
              <span class="left">
                {{ 'products.general.previous_product_html' | t | link_to: collection.previous_product }}
              </span>
            {% endif %}
            {% if collection.next_product %}
              <span class="right">
                {{ 'products.general.next_product_html' | t | link_to: collection.next_product }}
              </span>
            {% endif %}
          </p>
        {% endif %}
      {% endif %}

    </div>
  </div>

</div>

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>

  jQuery(function($) {
    $( ".datepicker" ).datepicker();
  });

  var selectCallback = function(variant, selector) {
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
</script>
